package models

import (
	"github.com/creasty/defaults"
	"github.com/gookit/config/v2"
	"github.com/gookit/config/v2/yamlv3"
	"github.com/gookit/goutil/dump"
)

// type DSLQueryConfigAutoGenerated struct {
// 	Query Query `json:"query"`
// }
// type Len struct {
// 	FieldPath string `json:"field_path"`
// }
// type Where struct {
// 	Len      Len    `json:"len"`
// 	Operator string `json:"operator"`
// 	Value    int    `json:"value"`
// }
// type Query struct {
// 	Name  string `json:"name"`
// 	Type  string `json:"type"`
// 	Where Where  `json:"where"`
// }

type SMFQueryConfig struct {
	DSLQuery DSLQueryConfig `mapstructure:"query" validate:"required"`
}

type DSLQueryConfig struct {
	Name string `mapstructure:"name" validate:"required"`
	Type string `mapstructure:"type" default:"native"`
	// Where WhereConfig `mapstructure:"where" validate:"required"`
	Where []interface{} `mapstructure:"where" validate:"required"`
}

type WhereConfig struct {
	// MatchExpressionConfig `mapstructure:"predicate" validate:"required"`
	MatchExpressionConfig `mapstructure:"condition" validate:"required"`
	LenFunctionExpression LenFunctionExpressionConfig `mapstructure:"len_condition" validate:"required"`
}

type LenFunctionConfig struct {
	FieldPath string `mapstructure:"field_path" validate:"required"`
}

type LenFunctionExpressionConfig struct {
	LenFunction LenFunctionConfig `mapstructure:"len" validate:"required"`
	Operator    string
	Value       interface{}
}

type MatchExpressionConfig struct {
	FieldPath string      `mapstructure:"field_path" validate:"required"`
	Operator  string      `mapstructure:"operator" validate:"required"`
	Value     interface{} `mapstructure:"value" validate:"required"`
}

// type FunctionExpressionConfig struct {
// 	FunctionName string
// 	FieldPath    string `mapstructure:"field_path" validate:"required"`
// 	Operator     string
// 	Value        interface{}
// }

// func NewDSLQueryConfig(file string) (cfg *DSLQueryConfigAutoGenerated, err error) {
func NewDSLQueryConfig(file string) (cfg *SMFQueryConfig, err error) {
	c := config.New("dsl-query-config").WithOptions(config.ParseEnv).WithDriver(yamlv3.Driver)
	err = c.LoadExistsByFormat(config.Yaml, file)
	if err != nil {
		return nil, err
	}

	// cfg = &DSLQueryConfigAutoGenerated{}
	cfg = &SMFQueryConfig{}
	err = c.Decode(cfg)
	if err != nil {
		return nil, err
	}
	dump.V(cfg)

	defaults.MustSet(cfg)

	dump.V(cfg)
	return cfg, nil
}
